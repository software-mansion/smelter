name: Rust - check
on:
    workflow_dispatch: {}
    push:
        branches: [master]
    pull_request:
        types: [opened, synchronize]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
    build_and_test_linux:
        runs-on: ubuntu-24.04
        steps:
            - name: 🛠 Install system dependencies
              run: |
                  set -e
                  sudo apt-get update -y -qq
                  sudo apt-get install -y mesa-vulkan-drivers libegl1-mesa-dev libgl1-mesa-dri libxcb-xfixes0-dev ffmpeg libavcodec-dev libavformat-dev libavfilter-dev libavdevice-dev libopus-dev

            - name: 🔧 Install the rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: 🔬 Install nextest
              uses: taiki-e/install-action@v2
              with:
                  tool: cargo-nextest

            - name: 📥 Checkout repo
              uses: actions/checkout@v4

            - name: 🧩 Git submodules update
              run: |
                cat > .gitmodules << EOF
                [submodule "snapshot_tests/snapshots"]
                        path = snapshot_tests/snapshots
                        url = https://github.com/membraneframework-labs/video_compositor_snapshot_tests.git
                EOF
                git submodule update --init

            - name: 📁 Rust cache
              uses: Swatinem/rust-cache@v2

            - name: 🪢 Generate Chromium Embedded Framework bindings
              run: cargo build --package compositor_chromium

            - name: 🛠 Cargo build
              run: |
                cargo build --features decklink
                cargo build --no-default-features

            - name: 🧪 Run tests
              run: |
                cargo clean
                cargo nextest run --workspace --profile ci

            - name: 📦 Upload failed snapshot test artifacts
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: failed_snapshot_tests
                  path: failed_snapshot_tests
                  retention-days: 2

            - name: 📚 Run doctests
              run: cargo test --workspace --doc

    build_macos:
        runs-on: macos-14
        steps:
            - name: 🛠 Install system dependencies
              run: brew install ffmpeg

            - name: 🔧 Install the rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: 📥 Checkout repo
              uses: actions/checkout@v4

            - name: 📁 Rust cache
              uses: Swatinem/rust-cache@v2

            - name: 🪢 Generate Chromium Embedded Framework bindings
              run: cargo build --package compositor_chromium

            - name: 📖 Check formatting
              run: cargo fmt --all --check

            - name: 📎 Run clippy
              run: cargo clippy --workspace --all-targets -- -D clippy::todo -D warnings

    lint:
        runs-on: ubuntu-24.04
        steps:
            - name: 🛠 Install system dependencies
              run: |
                  sudo apt-get update -y -qq
                  sudo apt-get install -y mesa-vulkan-drivers libegl1-mesa-dev libgl1-mesa-dri libxcb-xfixes0-dev ffmpeg libavcodec-dev libavformat-dev libavfilter-dev libavdevice-dev libopus-dev

            - name: 🔧 Install the rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9

            - name: 📥 Checkout repo
              uses: actions/checkout@v4

            - name: 📁 Rust cache
              uses: Swatinem/rust-cache@v2

            - name: 🪢 Generate Chromium Embedded Framework bindings
              run: cargo build --package compositor_chromium

            - name: 📖 Check formatting
              run: cargo fmt --all --check

            - name: 📎 Run clippy
              run: cargo clippy --workspace --all-targets --all-features -- -D clippy::todo -D warnings

            - name: 📄 Generate JSON schema
              working-directory: ./generate
              run: |
                cargo run --bin generate_from_types -- --check
